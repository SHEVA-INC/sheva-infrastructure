name: CD

on:
  repository_dispatch:
    types: [deploy-ui, deploy-api]
  workflow_dispatch:
    inputs:
      ui_image_tag:
        description: 'The UI ECR image tag to deploy'
        required: false
      api_image_tag:
        description: 'The API ECR image tag to deploy'
        required: false

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    outputs:
      ui_tag: ${{ steps.set-tags.outputs.ui_tag }}
      api_tag: ${{ steps.set-tags.outputs.api_tag }}
      should_deploy: ${{ steps.check-deployment.outputs.should_deploy }}

    steps:
      - name: Set deployment tags
        id: set-tags
        run: |
          cat > set_tags.sh << 'EOF'
          #!/bin/bash
          set -e
          set -u

          get_ssm_parameter() {
              local param_name="$1"
              local param_value

              if ! param_value=$(aws ssm get-parameter \
                  --name "$param_name" \
                  --query "Parameter.Value" \
                  --output text 2>/dev/null); then
                  echo "Error: Failed to get SSM parameter: $param_name" >&2
                  return 1
              fi
              echo "$param_value"
          }

          if [[ ! -z "$1" ]]; then
              echo "ui_tag=$1" >> $GITHUB_OUTPUT
          elif [[ "$3" == "ui" && ! -z "$4" ]]; then
              echo "ui_tag=$4" >> $GITHUB_OUTPUT
          else
              UI_TAG=$(get_ssm_parameter "/sheva-shop/prod/ui/latest-tag")
              echo "ui_tag=$UI_TAG" >> $GITHUB_OUTPUT
          fi

          # API tag logic
          if [[ ! -z "$2" ]]; then
              echo "api_tag=$2" >> $GITHUB_OUTPUT
          elif [[ "$3" == "api" && ! -z "$4" ]]; then
              echo "api_tag=$4" >> $GITHUB_OUTPUT
          else
              API_TAG=$(get_ssm_parameter "/sheva-shop/prod/api/latest-tag")
              echo "api_tag=$API_TAG" >> $GITHUB_OUTPUT
          fi
          EOF

          chmod +x set_tags.sh
          ./set_tags.sh \
            "${{ inputs.ui_image_tag }}" \
            "${{ inputs.api_image_tag }}" \
            "${{ github.event.client_payload.service }}" \
            "${{ github.event.client_payload.image_tag }}"

      - name: Check if deployment should proceed
        id: check-deployment
        run: |
          UI_TAG="${{ steps.set-tags.outputs.ui_tag }}"
          API_TAG="${{ steps.set-tags.outputs.api_tag }}"
          
          if [[ ! -z "$UI_TAG" ]] && [[ ! -z "$API_TAG" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "UI Tag: $UI_TAG"
            echo "API Tag: $API_TAG"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "Error: Missing required tags"
            [[ -z "$UI_TAG" ]] && echo "Missing UI tag"
            [[ -z "$API_TAG" ]] && echo "Missing API tag"
            exit 1
          fi

  deploy:
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.6"

    - name: Terraform Init
      working-directory: ./terraform/app/environment/prod
      run: terraform init

    - name: Terraform Apply
      working-directory: ./terraform/app/environment/prod
      run: terraform apply -auto-approve
      env:
        TF_VAR_environment: production
        TF_VAR_aws_region: ${{ vars.AWS_REGION }}
        TF_VAR_ecr_images_ui_image_tag: ${{ needs.prepare-deployment.outputs.ui_tag }}
        TF_VAR_ecr_images_api_image_tag: ${{ needs.prepare-deployment.outputs.api_tag }}

    - name: Update SSM Parameters
      run: |
        aws ssm put-parameter --name "/sheva-shop/prod/ui/latest-tag" --value "${{ needs.prepare-deployment.outputs.ui_tag }}" --type String --overwrite
        aws ssm put-parameter --name "/sheva-shop/prod/api/latest-tag" --value "${{ needs.prepare-deployment.outputs.api_tag }}" --type String --overwrite
